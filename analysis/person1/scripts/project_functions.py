{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "792b14a1-cf06-402d-a540-1410f7f82ab0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import filetype \n",
    "import seaborn as sns\n",
    "\n",
    "def load_n_process(filepath):\n",
    "    \n",
    "    df1 = (\n",
    "        #Load Data\n",
    "        pd.read_csv(filepath,  delimiter = ';')\n",
    "        \n",
    "        #Clean Data\n",
    "        #rename columns to shortened/abbreviated names\n",
    "        .rename(columns={'CHORD_ROOT':'root','CHORD_TYPE':'type','CHORD_STRUCTURE':'struct','FINGER_POSITIONS':'f_pos','NOTE_NAMES':'notes'})\n",
    "        \n",
    "        #Process Data\n",
    "        #create complexity and difficulty columns (to be modified later)\n",
    "        .assign(difficulty=lambda x: x.f_pos)\n",
    "        .assign(complexity=lambda x: x.struct)\n",
    "        #display chord roots in alphabetical order\n",
    "        .sort_values('root', ascending=True)\n",
    "        #Data Wrangling unnecessary for this dataset\n",
    "    )\n",
    "    #modify complexity column to be a calculation of two other columns\n",
    "    cmplxty_vals = calc_cmplx(df1.struct.array, df1.notes.array)\n",
    "    for x,y in zip (df1.struct.array,cmplxty_vals):\n",
    "        df1.complexity[df1.complexity==x] = y\n",
    "    \n",
    "    diff_vals = calc_diff(df1.difficulty.array)\n",
    "    for a,b in zip (df1.difficulty.array,diff_vals):\n",
    "        df1.difficulty[df1.difficulty==a] =b\n",
    "    return df1\n",
    "\n",
    "#Calculates complexity of a given chord by first adding the number of structure elements to the total number of notes in the chord then converting it to a percentage out of 100\n",
    "def calc_cmplx(array1, array2):\n",
    "    arg1 = []\n",
    "    arg2 = []\n",
    "    result = []\n",
    "    for i in array1:\n",
    "        arg1.append(len(i))\n",
    "    for j in array2:\n",
    "        arg2.append(len(j))\n",
    "    k = 0\n",
    "    for x,y in zip (arg1,arg2):\n",
    "        result.append(4.41*((arg1[k]+arg2[k])-8))\n",
    "        k+=1\n",
    "    return result\n",
    "#calculates difficulty as a dependent of how many fingers are used to make the chord \n",
    "def calc_diff(array):\n",
    "    x_count = 0\n",
    "    counts = []\n",
    "    for i in array:\n",
    "        x_count = 0\n",
    "        for j in i:\n",
    "            if j == 'x':\n",
    "                x_count +=1\n",
    "        counts.append((x_count-4)*-1)\n",
    "    return counts\n",
    "\n",
    "def descData(dataframe):\n",
    "    return dataframe.describe().T\n",
    "\n",
    "def getInfo(dataframe):\n",
    "    return dataframe.info()\n",
    "def x_y(df, x_axis, y_axis):\n",
    "    sns.displot(df,x= df[x_axis],y=df[y_axis])\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
